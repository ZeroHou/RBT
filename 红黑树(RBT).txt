#include<iostream>
#include<algorithm>//借用max函数
#include<vector>
using namespace std;

enum color { BLACK, RED };

template<typename T>
struct Node {
	Node<T>* left;
	Node<T>* right;
	T data;
	color col;
	Node(T val) :data(val), col(RED), left(nullptr), right(nullptr) {}
};

template<typename T>
class RBT {
private:
	Node<T>* root;

	Node<T>* rule(Node<T>* root, color befcol, T befval, T val, int lr) {
		color aftcol;
		T aftval;
		if (lr == 0) {
			if (root->left) {
				aftcol = root->left->col;
				aftval = root->left->data;
			}
			else {
				aftcol = BLACK;
				aftval = -1;
			}
			if (aftcol != befcol && befval == aftval) {
				if (aftcol == BLACK) {
					root->col = RED;
					if (root->right) {
						if (root->right->col == RED)
							root->right->col = BLACK;
						else root = rotate(root, val, 0);
					}
					else root = rotate(root, val, 1);
				}
			}
			if (root->left) {
				if (root->col == RED && root->left->col == RED) {
					root->col = BLACK;
				}
			}
		}
		else {
			if (root->right) {
				aftcol = root->right->col;
				aftval = root->right->data;
			}
			else {
				aftcol = BLACK;
				aftval = -1;
			}
			if (befcol != aftcol && befval == aftval) {
				if (aftcol == BLACK) {
					root->col = RED;
					if (root->left) {
						if (root->left->col == RED)
							root->left->col = BLACK;
						else root = rotate(root, val, 1);
					}
					else root = rotate(root, val, 1);
				}
			}
			if (root->right) {
				if (root->col == RED && root->right->col == RED) {
					root->col = BLACK;
				}
			}
		}
		return root;

	}
	//自平衡旋转：右单转、左单转、左右双转、右左双转
	Node<T>* rotate(Node<T>* root, T val, int lr) {
		if (lr == 0) {
			if (val < root->left->data)
				root = rightRotate(root);
			else root = lrRotate(root);
		}
		else {
			if (val > root->right->data)
				root = leftRotate(root);
			else root = rlRotate(root);
		}
		return root;
	}
	Node<T>* rightRotate(Node<T>* root) {
		if (root->right)
			root->right->col = BLACK;
		Node<T>* rleft = root->left;
		root->left = rleft->right;
		rleft->right = root;
		return rleft;
	}
	Node<T>* leftRotate(Node<T>* root) {
		Node<T>* rright = root->right;
		root->right = rright->left;
		rright->left = root;
		return rright;
	}
	Node<T>* lrRotate(Node<T>* root) {
		root->left = leftRotate(root->left);
		root->left->col = BLACK;
		root->left->left->col = RED;
		return rightRotate(root);
	}
	Node<T>* rlRotate(Node<T>* root) {
		root->right = rightRotate(root->right);
		root->right->col = BLACK;
		root->right->right->col = RED;
		return leftRotate(root);
	}

	//插入辅助函数
	Node<T>* insert(Node<T>* root, T val) {
		if (root) {
			color befcol;
			T befval;
			if (root->data > val) {
				if (root->left) {
					befcol = root->left->col;
					befval = root->left->data;
				}
				else {
					befcol = BLACK;
					befval = -1;
				}
				root->left = insert(root->left, val);
				return 	rule(root, befcol, befval, val, 0);;
			}
			if (root->data < val) {
				if (root->right) {
					befcol = root->right->col;
					befval = root->right->data;
				}
				else {
					befcol = BLACK;
					befval = -1;
				}
				root->right = insert(root->right, val);
				return 	rule(root, befcol, befval, val, 1);
			}
			return nullptr;
		}
		return new Node<T>(val);
	}

	//删除辅助函数
	Node<T>* del(Node<T>* root, T val) { return nullptr; }

	//查找辅助函数
	bool find(Node<T>* root, T val) {
		if (root) {
			if (root->data == val)
				return true;
			if (root->data > val)
				return find(root->left, val);
			else return find(root->right, val);
		}
		return false;
	}

	//遍历辅助函数
	void preOrder(Node<T>* root) {
		if (root) {
			cout << root->data;
			preOrder(root->left);
			preOrder(root->right);
		}
	}
	void inOrder(Node<T>* root) {
		if (root) {
			inOrder(root->left);
			cout << root->data;
			inOrder(root->right);
		}
	}
	void postOrder(Node<T>* root) {
		if (root) {
			postOrder(root->left);
			postOrder(root->right);
			cout << root->data;
		}
	}

	//高度计算辅助函数
	int height(Node<T>* root) {
		if (root) {
			return max(height(root->left), height(root->right)) + 1;
		}
		return 0;
	}


public:
	RBT(T val) { root = new Node<T>(val); root->col = BLACK; }
	~RBT() {}

	//添加
	bool insert(T val) {
		Node<T>* p = insert(root, val);
		if (p) {
			root = p;
			root->col = BLACK;
			return true;
		}
		return false;
	}

	//删除
	bool del(T val) {
		return false;
	}

	//查询
	bool find(T val) {
		return find(root, val);
	}

	//遍历：前序遍历（dfs）、中序遍历、后序遍历、层序遍历（bfs）
	//前序遍历
	void preOrder() {
		preOrder(root);
		cout << endl;
	}
	//中序遍历
	void inOrder() {
		inOrder(root);
		cout << endl;
	}
	//后序遍历
	void postOrder() {
		postOrder(root);
		cout << endl;
	}
	//层序遍历
	void levelOrder() {
		if (root) {
			vector<Node<T>*> nodes;
			nodes.push_back(root);
			int n = 1;
			for (int i = 0; i < n; i++) {
				cout << nodes[i]->data;
				if (nodes[i]->left) {
					nodes.push_back(nodes[i]->left);
					n++;
				}
				if (nodes[i]->right) {
					nodes.push_back(nodes[i]->right);
					n++;
				}
			}
		}
		cout << endl;
	}
	//深度优先搜索
	void dfs() { preOrder(); }
	//广度优先搜索
	void bfs() { levelOrder(); }

	//高度计算
	int height() {
		return height(root);
	}
};


int main() {
	RBT<int> rbt(4);
	//添加测试
	cout << "----------添加测试----------" << endl;
	cout << "前序遍历：";
	rbt.preOrder();
	rbt.insert(2);
	cout << "前序遍历：";
	rbt.preOrder();
	rbt.insert(6);
	cout << "前序遍历：";
	rbt.preOrder();
	rbt.insert(1);
	cout << "前序遍历：";
	rbt.preOrder();
	rbt.insert(3);
	cout << "前序遍历：";
	rbt.preOrder();
	rbt.insert(7);
	cout << "前序遍历：";
	rbt.preOrder();
	rbt.insert(5);
	cout << "前序遍历：";
	rbt.preOrder();
	rbt.insert(8);
	cout << "前序遍历：";
	rbt.preOrder();
	/*
		   4
		 ↙	↘
		2     6
	  ↙ ↘ ↙ ↘
	  1   3 5   7
	             ↘
				   8
	*/

	//红黑平衡测试
	cout << "----------红黑平衡测试----------" << endl;
	rbt.insert(9);
	cout << "前序遍历：";
	rbt.preOrder();

	/*
		   4
		 ↙	↘
		2     6
	  ↙ ↘ ↙ ↘
	  1   3 5   8
			  ↙ ↘
			 7	   9
	*/

	//遍历测试
	cout << "----------遍历测试----------" << endl;
	cout << "前序遍历：";
	rbt.preOrder();
	cout << "中序遍历：";
	rbt.inOrder();
	cout << "后序遍历：";
	rbt.postOrder();
	cout << "层序遍历：";
	rbt.levelOrder();
	cout << "深度优先搜索：";
	rbt.dfs();
	cout << "广度优先搜索：";
	rbt.bfs();

	//高度计算测试
	cout << "----------高度计算测试----------" << endl;
	cout << "height:" << rbt.height() << endl;

	//查询测试
	cout << "----------查询测试----------" << endl;
	cout << "查找7：" << rbt.find(7) << endl;
}